14408
((3) 0 () 1 ((q lib "dssl/main.rkt")) () (h ! (equal) ((c form c (c (? . 0) q check-expect)) q (1689 . 2)) ((c def c (c (? . 0) q string-ci<?)) q (11716 . 5)) ((c def c (c (? . 0) q error)) q (14081 . 3)) ((c def c (c (? . 0) q char-numeric?)) q (9962 . 3)) ((c def c (c (? . 0) q string-ci<=?)) q (11612 . 5)) ((c def c (c (? . 0) q sgn)) q (5347 . 3)) ((c def c (c (? . 0) q denominator)) q (3223 . 3)) ((c def c (c (? . 0) q equal?)) q (13838 . 4)) ((c def c (c (? . 0) q make-rectangular)) q (4297 . 4)) ((c form c (c (? . 0) q while)) q (1174 . 2)) ((c form c (c (? . 0) q Î»)) q (374 . 2)) ((c def c (c (? . 0) q hash-set)) q (18637 . 5)) ((c def c (c (? . 0) q newline)) q (16357 . 2)) ((c def c (c (? . 0) q implode)) q (10844 . 3)) ((c def c (c (? . 0) q char?)) q (10656 . 3)) ((c def c (c (? . 0) q promise?)) q (14286 . 3)) ((c def c (c (? . 0) q member?)) q (7999 . 4)) ((c def c (c (? . 0) q char->integer)) q (9252 . 3)) ((c def c (c (? . 0) q char<?)) q (10287 . 5)) ((c def c (c (? . 0) q list->string)) q (10952 . 3)) ((c def c (c (? . 0) q apply)) q (14835 . 5)) ((c def c (c (? . 0) q +)) q (14577 . 3)) ((c form c (c (? . 0) q and)) q (1582 . 2)) ((c def c (c (? . 0) q empty)) q (0 . 2)) ((c def c (c (? . 0) q char>=?)) q (10471 . 5)) ((c def c (c (? . 0) q cdar)) q (6922 . 3)) ((c form c (c (? . 0) q check-satisfied)) q (1799 . 2)) ((c def c (c (? . 0) q posn-x)) q (8970 . 3)) ((c def c (c (? . 0) q null)) q (8291 . 2)) ((c def c (c (? . 0) q symbol?)) q (6141 . 3)) ((c def c (c (? . 0) q make-immutable-hasheq)) q (19252 . 2)) ((c def c (c (? . 0) q explode)) q (10707 . 3)) ((c def c (c (? . 0) q hash-remove)) q (18478 . 4)) ((c def c (c (? . 0) q <)) q (2195 . 5)) ((c def c (c (? . 0) q string<?)) q (12847 . 5)) ((c def c (c (? . 0) q log)) q (4126 . 3)) ((c def c (c (? . 0) q true)) q (23 . 2)) ((c def c (c (? . 0) q make-vector)) q (17105 . 4)) ((c def c (c (? . 0) q void?)) q (14477 . 3)) ((c def c (c (? . 0) q eof-object?)) q (13713 . 3)) ((c def c (c (? . 0) q caaar)) q (6445 . 3)) ((c def c (c (? . 0) q posn?)) q (9062 . 3)) ((c def c (c (? . 0) q cddr)) q (7065 . 3)) ((c def c (c (? . 0) q max)) q (4374 . 4)) ((c def c (c (? . 0) q inexact?)) q (3818 . 3)) ((c def c (c (? . 0) q string)) q (11172 . 3)) ((c form c (c (? . 0) q let*)) q (1039 . 2)) ((c def c (c (? . 0) q andmap)) q (14731 . 4)) ((c def c (c (? . 0) q hash?)) q (19029 . 3)) ((c def c (c (? . 0) q cdddr)) q (7017 . 3)) ((c def c (c (? . 0) q >)) q (2463 . 5)) ((c def c (c (? . 0) q force)) q (14161 . 3)) ((c def c (c (? . 0) q memq?)) q (8140 . 4)) ((c def c (c (? . 0) q list->vector)) q (17036 . 3)) ((c def c (c (? . 0) q string-length)) q (12353 . 3)) ((c def c (c (? . 0) q hash-map)) q (18233 . 4)) ((c def c (c (? . 0) q current-seconds)) q (3182 . 2)) ((c def c (c (? . 0) q negative?)) q (4582 . 3)) ((c form c (c (? . 0) q letrec)) q (982 . 2)) ((c def c (c (? . 0) q symbol=?)) q (6066 . 4)) ((c def c (c (? . 0) q void)) q (14449 . 2)) ((c def c (c (? . 0) q floor)) q (3582 . 3)) ((c def c (c (? . 0) q vector?)) q (17538 . 3)) ((c def c (c (? . 0) q sqr)) q (5523 . 3)) ((c def c (c (? . 0) q int->string)) q (10895 . 3)) ((c def c (c (? . 0) q for-each)) q (15674 . 4)) ((c def c (c (? . 0) q eof)) q (13687 . 2)) ((c def c (c (? . 0) q map)) q (15771 . 4)) ((c def c (c (? . 0) q sleep)) q (14338 . 3)) ((c def c (c (? . 0) q cos)) q (3085 . 3)) ((c def c (c (? . 0) q display)) q (16310 . 3)) ((c def c (c (? . 0) q posn)) q (14699 . 2)) ((c def c (c (? . 0) q box?)) q (17633 . 3)) ((c def c (c (? . 0) q cosh)) q (3133 . 3)) ((c def c (c (? . 0) q string->symbol)) q (11425 . 3)) ((c def c (c (? . 0) q hash-equal?)) q (17952 . 3)) ((c def c (c (? . 0) q boolean=?)) q (5769 . 4)) ((c def c (c (? . 0) q add1)) q (2731 . 3)) ((c form c (c (? . 0) q check-error)) q (1909 . 3)) ((c def c (c (? . 0) q posn-y)) q (9016 . 3)) ((c def c (c (? . 0) q string-ci=?)) q (11819 . 5)) ((c def c (c (? . 0) q hash-ref)) q (18324 . 4)) ((c def c (c (? . 0) q string=?)) q (12947 . 5)) ((c def c (c (? . 0) q list*)) q (7640 . 4)) ((c def c (c (? . 0) q positive?)) q (4878 . 3)) ((c form c (c (? . 0) q cond)) q (1340 . 5)) ((c def c (c (? . 0) q exact?)) q (3412 . 3)) ((c def c (c (? . 0) q hash-update)) q (18821 . 5)) ((c def c (c (? . 0) q range)) q (8362 . 5)) ((c form c (c (? . 0) q set!)) q (288 . 2)) ((c def c (c (? . 0) q fourth)) q (7480 . 3)) ((c def c (c (? . 0) q pi)) q (4860 . 2)) ((c def c (c (? . 0) q inexact->exact)) q (3759 . 3)) ((c def c (c (? . 0) q char>?)) q (10564 . 5)) ((c def c (c (? . 0) q append)) q (6194 . 3)) ((c def c (c (? . 0) q real?)) q (5170 . 3)) ((c def c (c (? . 0) q quicksort)) q (16109 . 4)) ((c def c (c (? . 0) q with-output-to-string)) q (16838 . 3)) ((c def c (c (? . 0) q string-lower-case?)) q (12408 . 3)) ((c form c (c (? . 0) q local)) q (936 . 2)) ((c def c (c (? . 0) q hash-copy)) q (17796 . 3)) ((c def c (c (? . 0) q struct?)) q (14396 . 3)) ((c def c (c (? . 0) q string-ith)) q (12268 . 4)) ((c def c (c (? . 0) q first)) q (7432 . 3)) ((c def c (c (? . 0) q rational?)) q (5063 . 3)) ((c def c (c (? . 0) q pretty-print)) q (16387 . 3)) ((c def c (c (? . 0) q null?)) q (8311 . 3)) ((c def c (c (? . 0) q number?)) q (4697 . 3)) ((c def c (c (? . 0) q modulo)) q (4508 . 4)) ((c def c (c (? . 0) q with-input-from-file)) q (16582 . 4)) ((c def c (c (? . 0) q string-whitespace?)) q (12681 . 3)) ((c form c (c (? . 0) q until)) q (1228 . 2)) ((c def c (c (? . 0) q numerator)) q (4750 . 3)) ((c def c (c (? . 0) q caadr)) q (6493 . 3)) ((c def c (c (? . 0) q make-string)) q (11008 . 4)) ((c def c (c (? . 0) q compose)) q (15281 . 4)) ((c def c (c (? . 0) q integer-sqrt)) q (3937 . 3)) ((c form c (c (? . 0) q begin)) q (199 . 2)) ((c def c (c (? . 0) q unbox)) q (17751 . 3)) ((c def c (c (? . 0) q char-ci<?)) q (9466 . 5)) ((c def c (c (? . 0) q <=)) q (2282 . 5)) ((c form c (c (? . 0) q check-range)) q (2058 . 2)) ((c def c (c (? . 0) q asin)) q (2828 . 3)) ((c def c (c (? . 0) q gensym)) q (14205 . 2)) ((c def c (c (? . 0) q foldl)) q (15458 . 5)) ((c def c (c (? . 0) q string-append)) q (11549 . 3)) ((c def c (c (? . 0) q char-alphabetic?)) q (9309 . 3)) ((c def c (c (? . 0) q string-contains?)) q (12129 . 4)) ((c def c (c (? . 0) q assq)) q (6362 . 4)) ((c def c (c (? . 0) q -)) q (2124 . 4)) ((c def c (c (? . 0) q hash-ref!)) q (18393 . 5)) ((c def c (c (? . 0) q seventh)) q (8754 . 3)) ((c def c (c (? . 0) q hash-has-key?)) q (18153 . 4)) ((c def c (c (? . 0) q fifth)) q (7384 . 3)) ((c def c (c (? . 0) q image=?)) q (13411 . 4)) ((c def c (c (? . 0) q e)) q (3283 . 2)) ((c def c (c (? . 0) q caddr)) q (6685 . 3)) ((c def c (c (? . 0) q memv)) q (8210 . 4)) ((c def c (c (? . 0) q read)) q (16555 . 2)) ((c def c (c (? . 0) q assoc)) q (6264 . 4)) ((c def c (c (? . 0) q acos)) q (2682 . 3)) ((c def c (c (? . 0) q cddar)) q (6969 . 3)) ((c def c (c (? . 0) q string-numeric?)) q (12473 . 3)) ((c def c (c (? . 0) q even?)) q (3300 . 3)) ((c def c (c (? . 0) q sixth)) q (8804 . 3)) ((c def c (c (? . 0) q string>=?)) q (13047 . 5)) ((c form c (c (? . 0) q when)) q (801 . 2)) ((c def c (c (? . 0) q printf)) q (16484 . 4)) ((c def c (c (? . 0) q char-ci>?)) q (9752 . 5)) ((c def c (c (? . 0) q zero?)) q (5717 . 3)) ((c def c (c (? . 0) q atan)) q (2877 . 3)) ((c def c (c (? . 0) q string-alphabetic?)) q (11484 . 3)) ((c def c (c (? . 0) q eighth)) q (7283 . 3)) ((c def c (c (? . 0) q list)) q (7588 . 3)) ((c def c (c (? . 0) q build-string)) q (15198 . 4)) ((c form c (c (? . 0) q let)) q (1094 . 2)) ((c def c (c (? . 0) q member)) q (7928 . 4)) ((c def c (c (? . 0) q min)) q (4441 . 4)) ((c form c (c (? . 0) q lambda)) q (324 . 2)) ((c def c (c (? . 0) q cadar)) q (6588 . 3)) ((c def c (c (? . 0) q string->int)) q (11227 . 3)) ((c def c (c (? . 0) q string-ci>?)) q (12026 . 5)) ((c def c (c (? . 0) q =~)) q (13535 . 5)) ((c def c (c (? . 0) q exact->inexact)) q (3353 . 3)) ((c def c (c (? . 0) q build-list)) q (15115 . 4)) ((c def c (c (? . 0) q hash-count)) q (17846 . 3)) ((c def c (c (? . 0) q substring)) q (13301 . 5)) ((c def c (c (? . 0) q string<=?)) q (12746 . 5)) ((c def c (c (? . 0) q number->string)) q (4638 . 3)) ((c def c (c (? . 0) q hash-set!)) q (18732 . 5)) ((c def c (c (? . 0) q string?)) q (13248 . 3)) ((c def c (c (? . 0) q eq?)) q (13770 . 4)) ((c def c (c (? . 0) q cons)) q (7158 . 4)) ((c def c (c (? . 0) q char-ci>=?)) q (9656 . 5)) ((c def c (c (? . 0) q expt)) q (3513 . 4)) ((c def c (c (? . 0) q hash-eq?)) q (17900 . 3)) ((c def c (c (? . 0) q integer->char)) q (3873 . 3)) ((c def c (c (? . 0) q car)) q (6780 . 3)) ((c def c (c (? . 0) q char-ci<=?)) q (9370 . 5)) ((c def c (c (? . 0) q exp)) q (3465 . 3)) ((c def c (c (? . 0) q make-list)) q (7848 . 4)) ((c def c (c (? . 0) q print)) q (16439 . 3)) ((c form c (c (? . 0) q check-member-of)) q (1992 . 2)) ((c def c (c (? . 0) q char-lower-case?)) q (9901 . 3)) ((c def c (c (? . 0) q string-copy)) q (12212 . 3)) ((c def c (c (? . 0) q string->list)) q (11284 . 3)) ((c def c (c (? . 0) q filter)) q (15365 . 4)) ((c def c (c (? . 0) q round)) q (5298 . 3)) ((c def c (c (? . 0) q vector-length)) q (17313 . 3)) ((c def c (c (? . 0) q eqv?)) q (14012 . 4)) ((c def c (c (? . 0) q abs)) q (2638 . 3)) ((c def c (c (? . 0) q vector)) q (17183 . 3)) ((c def c (c (? . 0) q second)) q (8705 . 3)) ((c def c (c (? . 0) q set-posn-x!)) q (9113 . 4)) ((c def c (c (? . 0) q angle)) q (2780 . 3)) ((c def c (c (? . 0) q argmax)) q (14959 . 4)) ((c def c (c (? . 0) q >=)) q (2550 . 5)) ((c def c (c (? . 0) q reverse)) q (8656 . 3)) ((c def c (c (? . 0) q conjugate)) q (3031 . 3)) ((c def c (c (? . 0) q char-downcase)) q (9847 . 3)) ((c def c (c (? . 0) q make-hasheqv)) q (19159 . 2)) ((c def c (c (? . 0) q char<=?)) q (10194 . 5)) ((c def c (c (? . 0) q false?)) q (5903 . 3)) ((c def c (c (? . 0) q vector-ref)) q (17373 . 4)) ((c def c (c (? . 0) q string->number)) q (11349 . 3)) ((c def c (c (? . 0) q char-upcase)) q (10020 . 3)) ((c form c (c (? . 0) q or)) q (1636 . 2)) ((c def c (c (? . 0) q gcd)) q (3631 . 4)) ((c def c (c (? . 0) q ceiling)) q (2926 . 3)) ((c def c (c (? . 0) q vector-set!)) q (17445 . 5)) ((c def c (c (? . 0) q list?)) q (7799 . 3)) ((c def c (c (? . 0) q equal~?)) q (13909 . 5)) ((c def c (c (? . 0) q format)) q (10769 . 4)) ((c def c (c (? . 0) q hash-for-each)) q (18061 . 4)) ((c def c (c (? . 0) q empty?)) q (7332 . 3)) ((c form c (c (? . 0) q define)) q (128 . 2) (72 . 2)) ((c def c (c (? . 0) q sqrt)) q (5571 . 3)) ((c def c (c (? . 0) q make-hasheq)) q (19117 . 2)) ((c def c (c (? . 0) q real-part)) q (5118 . 3)) ((c def c (c (? . 0) q cdaar)) q (6826 . 3)) ((c def c (c (? . 0) q foldr)) q (15566 . 5)) ((c def c (c (? . 0) q write)) q (16904 . 3)) ((c def c (c (? . 0) q hash-update!)) q (18928 . 5)) ((c def c (c (? . 0) q remove-all)) q (8537 . 4)) ((c def c (c (? . 0) q procedure?)) q (16055 . 3)) ((c def c (c (? . 0) q remove)) q (8469 . 4)) ((c def c (c (? . 0) q cons?)) q (7232 . 3)) ((c def c (c (? . 0) q sin)) q (5426 . 3)) ((c def c (c (? . 0) q with-input-from-string)) q (16667 . 4)) ((c def c (c (? . 0) q string>?)) q (13148 . 5)) ((c def c (c (? . 0) q build-vector)) q (16949 . 4)) ((c def c (c (? . 0) q with-output-to-file)) q (16754 . 4)) ((c form c (c (? . 0) q check-within)) q (1847 . 2)) ((c def c (c (? . 0) q false)) q (47 . 2)) ((c def c (c (? . 0) q sort)) q (16212 . 4)) ((c def c (c (? . 0) q random)) q (5010 . 3)) ((c form c (c (? . 0) q time)) q (1148 . 2)) ((c form c (c (? . 0) q delay)) q (909 . 2)) ((c def c (c (? . 0) q complex?)) q (2977 . 3)) ((c def c (c (? . 0) q magnitude)) q (4174 . 3)) ((c def c (c (? . 0) q symbol->string)) q (6007 . 3)) ((c form c (c (? . 0) q unless)) q (854 . 2)) ((c def c (c (? . 0) q memq)) q (8071 . 4)) ((c form c (c (? . 0) q define-struct)) q (1282 . 2)) ((c def c (c (? . 0) q image?)) q (13483 . 3)) ((c def c (c (? . 0) q odd?)) q (4808 . 3)) ((c def c (c (? . 0) q exit)) q (14134 . 2)) ((c def c (c (? . 0) q char-upper-case?)) q (10072 . 3)) ((c def c (c (? . 0) q tan)) q (5669 . 3)) ((c def c (c (? . 0) q remainder)) q (5221 . 4)) ((c def c (c (? . 0) q boolean?)) q (5849 . 3)) ((c def c (c (? . 0) q lcm)) q (4050 . 4)) ((c def c (c (? . 0) q hash-eqv?)) q (18008 . 3)) ((c def c (c (? . 0) q rest)) q (8609 . 3)) ((c def c (c (? . 0) q imag-part)) q (3707 . 3)) ((c def c (c (? . 0) q cdr)) q (7112 . 3)) ((c def c (c (? . 0) q hash-remove!)) q (18561 . 4)) ((c def c (c (? . 0) q string-ref)) q (12535 . 4)) ((c def c (c (? . 0) q caar)) q (6541 . 3)) ((c def c (c (? . 0) q cadddr)) q (6636 . 3)) ((c def c (c (? . 0) q ormap)) q (15967 . 4)) ((c def c (c (? . 0) q make-posn)) q (8900 . 4)) ((c def c (c (? . 0) q integer?)) q (3996 . 3)) ((c def c (c (? . 0) q cdadr)) q (6874 . 3)) ((c def c (c (? . 0) q quotient)) q (4934 . 4)) ((c def c (c (? . 0) q set-posn-y!)) q (9183 . 4)) ((c def c (c (? . 0) q third)) q (8852 . 3)) ((c def c (c (? . 0) q argmin)) q (15037 . 4)) ((c form c (c (? . 0) q if)) q (1519 . 2)) ((c def c (c (? . 0) q box)) q (17588 . 3)) ((c def c (c (? . 0) q string-upper-case?)) q (12616 . 3)) ((c def c (c (? . 0) q replicate)) q (11090 . 4)) ((c def c (c (? . 0) q sub1)) q (5620 . 3)) ((c def c (c (? . 0) q not)) q (5955 . 3)) ((c def c (c (? . 0) q make-immutable-hash)) q (19202 . 2)) ((c form c (c (? . 0) q begin0)) q (243 . 2)) ((c def c (c (? . 0) q memf)) q (15863 . 4)) ((c def c (c (? . 0) q identity)) q (14237 . 3)) ((c def c (c (? . 0) q char-ci=?)) q (9561 . 5)) ((c def c (c (? . 0) q current-milliseconds)) q (13635 . 2)) ((c def c (c (? . 0) q vector->list)) q (17244 . 3)) ((c def c (c (? . 0) q cadr)) q (6733 . 3)) ((c def c (c (? . 0) q make-polar)) q (4226 . 4)) ((c def c (c (? . 0) q /)) q (14628 . 4)) ((c form c (c (? . 0) q check-random)) q (1744 . 2)) ((c form c (c (? . 0) q match)) q (741 . 2)) ((c form c (c (? . 0) q case)) q (420 . 4)) ((c def c (c (? . 0) q length)) q (7529 . 3)) ((c def c (c (? . 0) q set-box!)) q (17683 . 4)) ((c def c (c (? . 0) q make-immutable-hasheqv)) q (19304 . 2)) ((c def c (c (? . 0) q =)) q (2370 . 5)) ((c def c (c (? . 0) q char-whitespace?)) q (10133 . 3)) ((c def c (c (? . 0) q string-ci>=?)) q (11922 . 5)) ((c def c (c (? . 0) q sinh)) q (5474 . 3)) ((c def c (c (? . 0) q *)) q (14526 . 3)) ((c def c (c (? . 0) q make-hash)) q (19077 . 2)) ((c def c (c (? . 0) q char=?)) q (10379 . 5)) ((c def c (c (? . 0) q list-ref)) q (7726 . 4))))
value
emptyÂ :Â empty?
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
syntax
(defineÂ (nameÂ variableÂ ...)Â expressionÂ ...)
syntax
(defineÂ nameÂ expression)
syntax
(expressionÂ expressionÂ ...)
syntax
(beginÂ expressionÂ expressionÂ ...)
syntax
(begin0Â expressionÂ expressionÂ ...)
syntax
(set!Â variableÂ expression)
syntax
(lambdaÂ (variableÂ ...)Â expressionÂ ...)
syntax
(Î»Â (variableÂ ...)Â expressionÂ ...)
syntax
(caseÂ expressionÂ [(choiceÂ ...)Â expressionÂ ...]
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ...
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â [(choiceÂ ...)Â expressionÂ ...])
syntax
(caseÂ expressionÂ [(choiceÂ ...)Â expressionÂ ...]
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â ...
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â [elseÂ expressionÂ ...])
syntax
(matchÂ expressionÂ [patternÂ expressionÂ ...]Â ...)
syntax
(whenÂ test-expressionÂ body-expressionÂ ...)
syntax
(unlessÂ test-expressionÂ body-expressionÂ ...)
syntax
(delayÂ expression)
syntax
(localÂ [definitionÂ ...]Â expression)
syntax
(letrecÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(let*Â ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(letÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(timeÂ expression)
syntax
(whileÂ test-expressionÂ body-expressionÂ ...)
syntax
(untilÂ test-expressionÂ body-expressionÂ ...)
syntax
(define-structÂ structure-nameÂ (field-nameÂ ...))
syntax
(condÂ [question-expressionÂ answer-expressionÂ ...]Â ...)
(condÂ [question-expressionÂ answer-expressionÂ ...]
Â Â Â Â Â Â ...
Â Â Â Â Â Â [elseÂ answer-expressionÂ ...])
syntax
(ifÂ test-expressionÂ then-expressionÂ else-expression)
syntax
(andÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(orÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-expectÂ expressionÂ expected-expression)
syntax
(check-randomÂ expressionÂ expected-expression)
syntax
(check-satisfiedÂ expressionÂ predicate)
syntax
(check-withinÂ expressionÂ expected-expressionÂ delta)
syntax
(check-errorÂ expressionÂ expected-error-message)
(check-errorÂ expression)
syntax
(check-member-ofÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-rangeÂ expressionÂ low-expressionÂ high-expression)
procedure
(-Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(<Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(<=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(>Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(>=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(absÂ x)Â ->Â real
Â Â xÂ :Â real
procedure
(acosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(add1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(angleÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(asinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(atanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(ceilingÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(complex?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(conjugateÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(cosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(coshÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(current-seconds)Â ->Â integer
procedure
(denominatorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
value
eÂ :Â real
procedure
(even?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
procedure
(exact->inexactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(expÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exptÂ xÂ y)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(floorÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(gcdÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(imag-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(inexact->exactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(inexact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(integer->charÂ x)Â ->Â char
Â Â xÂ :Â exact-integer?
procedure
(integer-sqrtÂ x)Â ->Â complex
Â Â xÂ :Â integer
procedure
(integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(lcmÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(logÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(magnitudeÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(make-polarÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(make-rectangularÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(maxÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(minÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(moduloÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(number->stringÂ x)Â ->Â string
Â Â xÂ :Â number
procedure
(number?Â n)Â ->Â boolean?
Â Â nÂ :Â any/c
procedure
(numeratorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
procedure
(odd?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
value
piÂ :Â real
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(quotientÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(randomÂ x)Â ->Â natural
Â Â xÂ :Â natural
procedure
(rational?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(real-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(real?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(remainderÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(roundÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(sgnÂ x)Â ->Â (unionÂ 1Â #i1.0Â 0Â #i0.0Â -1Â #i-1.0)
Â Â xÂ :Â real
procedure
(sinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sinhÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrtÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sub1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(tanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(zero?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(boolean=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â boolean?
Â Â yÂ :Â boolean?
procedure
(boolean?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(false?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(notÂ x)Â ->Â boolean?
Â Â xÂ :Â boolean?
procedure
(symbol->stringÂ x)Â ->Â string
Â Â xÂ :Â symbol
procedure
(symbol=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â symbol
Â Â yÂ :Â symbol
procedure
(symbol?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(appendÂ lÂ ...)Â ->Â (listofÂ any)
Â Â lÂ :Â (listofÂ any)
procedure
(assocÂ xÂ l)Â ->Â (unionÂ (listofÂ any)Â #false)
Â Â xÂ :Â any
Â Â lÂ :Â (listofÂ any)
procedure
(assqÂ xÂ l)Â ->Â (unionÂ #falseÂ cons?)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(caaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(carÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(cdaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdarÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cddarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cddrÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cdrÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(consÂ xÂ l)Â ->Â (listofÂ X)
Â Â xÂ :Â X
Â Â lÂ :Â (listofÂ X)
procedure
(cons?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eighthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(empty?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fifthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(firstÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(fourthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(lengthÂ l)Â ->Â natural-number?
Â Â lÂ :Â list?
procedure
(listÂ xÂ ...)Â ->Â list?
Â Â xÂ :Â any/c
procedure
(list*Â xÂ ...Â l)Â ->Â (listofÂ any)
Â Â xÂ :Â any
Â Â lÂ :Â (listofÂ any)
procedure
(list-refÂ xÂ i)Â ->Â any/c
Â Â xÂ :Â list?
Â Â iÂ :Â natural?
procedure
(list?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(make-listÂ iÂ x)Â ->Â list?
Â Â iÂ :Â natural-number
Â Â xÂ :Â any/c
procedure
(memberÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(member?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memqÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memq?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memvÂ xÂ l)Â ->Â (or/cÂ #falseÂ list)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
value
nullÂ :Â list
procedure
(null?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(rangeÂ startÂ endÂ step)Â ->Â list?
Â Â startÂ :Â number
Â Â endÂ :Â number
Â Â stepÂ :Â number
procedure
(removeÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(remove-allÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(restÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(reverseÂ l)Â ->Â list
Â Â lÂ :Â list?
procedure
(secondÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(seventhÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(sixthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(thirdÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(make-posnÂ xÂ y)Â ->Â posn
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(posn-xÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn-yÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set-posn-x!Â pÂ x)Â ->Â void?
Â Â pÂ :Â posn
Â Â xÂ :Â any
procedure
(set-posn-y!Â pÂ x)Â ->Â void
Â Â pÂ :Â posn
Â Â xÂ :Â any
procedure
(char->integerÂ c)Â ->Â integer
Â Â cÂ :Â char
procedure
(char-alphabetic?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-ci<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci<?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-downcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-lower-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-numeric?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-upcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-upper-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-whitespace?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char<?Â xÂ dÂ eÂ ...)Â ->Â boolean?
Â Â xÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(explodeÂ s)Â ->Â (listofÂ string)
Â Â sÂ :Â string
procedure
(formatÂ fÂ xÂ ...)Â ->Â string
Â Â fÂ :Â string
Â Â xÂ :Â any/c
procedure
(implodeÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(int->stringÂ i)Â ->Â string
Â Â iÂ :Â integer
procedure
(list->stringÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(make-stringÂ iÂ c)Â ->Â string
Â Â iÂ :Â natural-number
Â Â cÂ :Â char
procedure
(replicateÂ iÂ s)Â ->Â string
Â Â iÂ :Â natural-number
Â Â sÂ :Â string
procedure
(stringÂ cÂ ...)Â ->Â string?
Â Â cÂ :Â char
procedure
(string->intÂ s)Â ->Â integer
Â Â sÂ :Â string
procedure
(string->listÂ s)Â ->Â (listofÂ char)
Â Â sÂ :Â string
procedure
(string->numberÂ s)Â ->Â (unionÂ numberÂ #false)
Â Â sÂ :Â string
procedure
(string->symbolÂ s)Â ->Â symbol
Â Â sÂ :Â string
procedure
(string-alphabetic?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-appendÂ sÂ ...)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ci<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-contains?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-copyÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ithÂ sÂ i)Â ->Â 1string?
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-lengthÂ s)Â ->Â nat
Â Â sÂ :Â string
procedure
(string-lower-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-numeric?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-refÂ sÂ i)Â ->Â char
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-upper-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-whitespace?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(substringÂ sÂ iÂ j)Â ->Â string
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
Â Â jÂ :Â natural-number
procedure
(image=?Â iÂ j)Â ->Â boolean?
Â Â iÂ :Â image
Â Â jÂ :Â image
procedure
(image?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(=~Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â non-negative-real
procedure
(current-milliseconds)Â ->Â exact-integer
value
eofÂ :Â eof-object?
procedure
(eof-object?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eq?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal~?Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
Â Â zÂ :Â non-negative-real
procedure
(eqv?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(errorÂ xÂ ...)Â ->Â void?
Â Â xÂ :Â any/c
procedure
(exit)Â ->Â void
procedure
(forceÂ v)Â ->Â any
Â Â vÂ :Â any
procedure
(gensym)Â ->Â symbol?
procedure
(identityÂ x)Â ->Â any
Â Â xÂ :Â any/c
procedure
(promise?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(sleepÂ sec)Â ->Â void
Â Â secÂ :Â positive-num
procedure
(struct?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(void)Â ->Â void?
procedure
(void?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(*Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(+Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(/Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(posn)Â ->Â signature
procedure
(andmapÂ p?Â [l])Â ->Â boolean
Â Â p?Â :Â (XÂ ...Â ->Â boolean)
Â Â lÂ :Â (listofÂ X)Â =Â ...
procedure
(applyÂ fÂ x-1Â ...Â l)Â ->Â Y
Â Â fÂ :Â (X-1Â ...Â X-NÂ ->Â Y)
Â Â x-1Â :Â X-1
Â Â lÂ :Â (listÂ X-i+1Â ...Â X-N)
procedure
(argmaxÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(argminÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(build-listÂ nÂ f)Â ->Â (listofÂ X)
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â X)
procedure
(build-stringÂ nÂ f)Â ->Â string
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â char)
procedure
(composeÂ fÂ g)Â ->Â (XÂ ->Â Z)
Â Â fÂ :Â (YÂ ->Â Z)
Â Â gÂ :Â (XÂ ->Â Y)
procedure
(filterÂ p?Â l)Â ->Â (listofÂ X)
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(foldlÂ fÂ baseÂ lÂ ...)Â ->Â Y
Â Â fÂ :Â (XÂ ...Â YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(foldrÂ fÂ baseÂ lÂ ...)Â ->Â Y
Â Â fÂ :Â (XÂ ...Â YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(for-eachÂ fÂ lÂ ...)Â ->Â void?
Â Â fÂ :Â (anyÂ ...Â ->Â any)
Â Â lÂ :Â (listofÂ any)
procedure
(mapÂ fÂ lÂ ...)Â ->Â (listofÂ Z)
Â Â fÂ :Â (XÂ ...Â ->Â Z)
Â Â lÂ :Â (listofÂ X)
procedure
(memfÂ p?Â l)Â ->Â (unionÂ #falseÂ (listofÂ X))
Â Â p?Â :Â (XÂ ->Â any)
Â Â lÂ :Â (listofÂ X)
procedure
(ormapÂ p?Â l)Â ->Â boolean
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(procedure?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(quicksortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
procedure
(sortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
procedure
(displayÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(newline)Â ->Â void
procedure
(pretty-printÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(printÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(printfÂ fÂ xÂ ...)Â ->Â void
Â Â fÂ :Â string
Â Â xÂ :Â any
procedure
(read)Â ->Â sexp
procedure
(with-input-from-fileÂ fÂ p)Â ->Â any
Â Â fÂ :Â string
Â Â pÂ :Â (->Â any)
procedure
(with-input-from-stringÂ sÂ p)Â ->Â any
Â Â sÂ :Â string
Â Â pÂ :Â (->Â any)
procedure
(with-output-to-fileÂ fÂ p)Â ->Â any
Â Â fÂ :Â string
Â Â pÂ :Â (->Â any)
procedure
(with-output-to-stringÂ p)Â ->Â any
Â Â pÂ :Â (->Â any)
procedure
(writeÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(build-vectorÂ nÂ f)Â ->Â (vectorofÂ X)
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â X)
procedure
(list->vectorÂ l)Â ->Â (vectorofÂ X)
Â Â lÂ :Â (listofÂ X)
procedure
(make-vectorÂ nÂ x)Â ->Â (vectorofÂ X)
Â Â nÂ :Â number
Â Â xÂ :Â X
procedure
(vectorÂ xÂ ...)Â ->Â (vectorÂ XÂ ...)
Â Â xÂ :Â X
procedure
(vector->listÂ v)Â ->Â (listofÂ X)
Â Â vÂ :Â (vectorofÂ X)
procedure
(vector-lengthÂ v)Â ->Â nat
Â Â vÂ :Â (vectorÂ X)
procedure
(vector-refÂ vÂ n)Â ->Â X
Â Â vÂ :Â (vectorÂ X)
Â Â nÂ :Â nat
procedure
(vector-set!Â vÂ nÂ x)Â ->Â void
Â Â vÂ :Â (vectorofÂ X)
Â Â nÂ :Â nat
Â Â xÂ :Â X
procedure
(vector?Â x)Â ->Â boolean
Â Â xÂ :Â any
procedure
(boxÂ x)Â ->Â box?
Â Â xÂ :Â any/c
procedure
(box?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set-box!Â bÂ x)Â ->Â void
Â Â bÂ :Â box?
Â Â xÂ :Â any/c
procedure
(unboxÂ b)Â ->Â any
Â Â bÂ :Â box?
procedure
(hash-copyÂ h)Â ->Â hash
Â Â hÂ :Â hash
procedure
(hash-countÂ h)Â ->Â integer
Â Â hÂ :Â hash
procedure
(hash-eq?Â h)Â ->Â boolean
Â Â hÂ :Â hash
procedure
(hash-equal?Â h)Â ->Â boolean
Â Â hÂ :Â hash?
procedure
(hash-eqv?Â h)Â ->Â boolean
Â Â hÂ :Â hash
procedure
(hash-for-eachÂ hÂ f)Â ->Â void?
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â fÂ :Â (XÂ YÂ ->Â any)
procedure
(hash-has-key?Â hÂ x)Â ->Â boolean
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â xÂ :Â X
procedure
(hash-mapÂ hÂ f)Â ->Â (listofÂ Z)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â fÂ :Â (XÂ YÂ ->Â Z)
procedure
(hash-refÂ hÂ k)Â ->Â Y
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
procedure
(hash-ref!Â hÂ kÂ v)Â ->Â Y
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â vÂ :Â Y
procedure
(hash-removeÂ hÂ k)Â ->Â (hashÂ XÂ Y)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
procedure
(hash-remove!Â hÂ x)Â ->Â void
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â xÂ :Â X
procedure
(hash-setÂ hÂ kÂ v)Â ->Â (hashÂ XÂ Y)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â vÂ :Â Y
procedure
(hash-set!Â hÂ kÂ v)Â ->Â void?
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â vÂ :Â Y
procedure
(hash-updateÂ hÂ kÂ f)Â ->Â (hashÂ XÂ Y)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â fÂ :Â (YÂ ->Â Y)
procedure
(hash-update!Â hÂ kÂ f)Â ->Â void?
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â fÂ :Â (YÂ ->Â Y)
procedure
(hash?Â x)Â ->Â boolean
Â Â xÂ :Â any
procedure
(make-hash)Â ->Â (hashÂ XÂ Y)
procedure
(make-hasheq)Â ->Â (hashÂ XÂ Y)
procedure
(make-hasheqv)Â ->Â (hashÂ XÂ Y)
procedure
(make-immutable-hash)Â ->Â (hashÂ XÂ Y)
procedure
(make-immutable-hasheq)Â ->Â (hashÂ XÂ Y)
procedure
(make-immutable-hasheqv)Â ->Â (hashÂ XÂ Y)
